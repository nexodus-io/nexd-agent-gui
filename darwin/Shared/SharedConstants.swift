import Foundation
import Authorized
import Blessed
import SecureXPC
import EmbeddedPropertyList

/// Encapsulates a set of constants used throughout the app and helper tool.
struct SharedConstants {
    /// Errors preventing shared constants from being created.
    enum SharedConstantsError: Error {
        /// The helper tool's launchd property list's value for `MachServices` array has no elements.
        case missingMachServiceName
        /// The app's info property list is missing its `SMPrivilegedExecutables` key or has no entries in the correct format.
        case missingSMPrivilegedExecutables
    }
    
    // MARK: True constants
    
    /// Authorization right used to force user to authenticate as admin before performing an action.
    static let exampleRight = AuthorizationRight(name: "io.nexodus.nexodus-gui.secure-action")
    /// XPC route to run an allowed command as root.
    static let allowedCommandRoute = XPCRoute.named("process")
                                             .withMessageType(AllowedCommandMessage.self)
                                             .withReplyType(AllowedCommandReply.self)
                                             .throwsType(AllowedCommandError.self)
    /// XPC route to uninstall the helper tool.
    static let uninstallRoute = XPCRoute.named("uninstall")
    /// XPC route to update the helper tool.
    static let updateRoute = XPCRoute.named("update")
                                     .withMessageType(URL.self)
    
    // MARK: Derived constants
    
    /// The label of the helper tool. This is required by `SMJobBless` to match its filename.
    let helperToolLabel: String
    /// The version of the helper tool. If this is being accessed by the helper tool this is its own version. If this is being accessed by the app it is the version of
    /// the bundled helper tool.
    let helperToolVersion: BundleVersion
    /// The name of the Mach service registered by the helper tool. If there are multiple registered Mach services, this is set to the name of the first one. If using the
    /// build script that's part of this project, then this will have the same value as `helperToolLabel`, but no such requirement exists and this code makes no
    /// such assumption.
    let machServiceName: String
    /// Location of the helper tool's launchd property list generated by the system as part of `SMJobBless`.
///
    /// In practice this is where `SMJobBless` will place the launchd property list, but this behavior is not officially documented.
    let blessedPropertyListLocation: URL
    /// Location of the helper tool if it has been blessed via `SMJobBless`.
    ///
    /// In practice this is where `SMJobBless` will install the helper tool, but this behavior is not officially documented.
    let blessedLocation: URL
    
    #if APP
    /// Location of the helper tool within the app bundle.
    let bundledLocation: URL
    #endif
    
    /// Initializes a set of constants used throughout the app and helper tool.
    init() throws {
    #if APP
        guard let helperToolLabel = (Bundle.main.infoDictionary?["SMPrivilegedExecutables"]
                                     as? [String : Any])?.first?.key else {
            throw SharedConstantsError.missingSMPrivilegedExecutables
        }
        self.helperToolLabel = helperToolLabel
        self.bundledLocation = URL(fileURLWithPath: "Contents/Library/LaunchServices/\(helperToolLabel)",
                                   relativeTo: Bundle.main.bundleURL).absoluteURL
        let launchdPropertyList = try HelperToolLaunchdPropertyList(from: self.bundledLocation)
        let infoPropertyList = try HelperToolInfoPropertyList(from: self.bundledLocation)
    #else
    #if HELPER_TOOL
        let launchdPropertyList = try HelperToolLaunchdPropertyList.main
        let infoPropertyList = try HelperToolInfoPropertyList.main
        self.helperToolLabel = launchdPropertyList.label
    #else
        fatalError("""
        No Swift compiler directive was set for this executable. In this sample this is set in the AppConfig.xcconfig \
        and HelperToolConfig.xcconfig configuration files.
        """)
    #endif
    #endif
        
        self.helperToolVersion = infoPropertyList.version
        self.blessedPropertyListLocation = URL(fileURLWithPath: "/Library/LaunchDaemons/\(helperToolLabel).plist")
        self.blessedLocation = URL(fileURLWithPath: "/Library/PrivilegedHelperTools/\(helperToolLabel)")
        
        // Important: If the Mach service name has been changed, for the app until that new version of the helper tool
        // is installed via SMJobBless this will not result in the correct name being found.
        guard let machServiceName = launchdPropertyList.machServices.first?.key else {
            throw SharedConstantsError.missingMachServiceName
        }
        self.machServiceName = machServiceName
    }
}
